---
description: 
globs: 
alwaysApply: true
---
# 项目结构规则

## 整体架构

Mini Web是一个前后端分离的Web管理系统，采用React前端和Go后端。

- 前端：React + TypeScript + Ant Design
- 后端：Go + Gorilla Mux + SQLite
- 认证：JWT

## 目录结构

```
mini-web/
├── frontend/                # React前端
│   ├── src/
│   │   ├── components/      # 通用组件
│   │   ├── contexts/        # 上下文提供者
│   │   ├── hooks/           # 自定义钩子
│   │   ├── layouts/         # 页面布局
│   │   ├── pages/           # 页面组件
│   │   └── services/        # API服务
├── backend/                 # Go后端
│   ├── cmd/                 # 入口程序
│   ├── internal/            # 内部包
│   │   ├── api/             # API处理器
│   │   ├── config/          # 配置
│   │   ├── middleware/      # 中间件
│   │   ├── model/           # 数据模型
│   │   └── service/         # 业务逻辑
```

## 关键文件

### 前端文件
- [App.tsx](mdc:frontend/src/App.tsx) - 应用根组件
- [routes.tsx](mdc:frontend/src/routes.tsx) - 路由定义
- [AuthContext.tsx](mdc:frontend/src/contexts/AuthContext.tsx) - 认证上下文
- [TerminalContext.tsx](mdc:frontend/src/contexts/TerminalContext.tsx) - 终端上下文

### 后端文件
- [main.go](mdc:backend/cmd/server/main.go) - 后端入口
- [user.go](mdc:backend/internal/model/sqlite/user.go) - 用户模型

## 命名与编码规范

### 通用命名规则
- 使用有意义的描述性名称
- 避免使用缩写，除非是广泛接受的缩写
- 保持命名一致性
- 前后端接口参数命名保持一致

### 文件组织原则
- 相关功能应组织在同一目录下
- 避免目录嵌套过深（不超过5层）
- 每个目录需要有明确的职责
- 避免跨目录的循环依赖

## 版本控制规范

### Git工作流
- 主分支(main)保持稳定，禁止直接提交
- 为每个功能创建独立的特性分支(feature/xxx)
- 为修复使用bugfix/xxx命名分支
- 重大版本更新使用release/x.x.x分支

### 提交信息规范
- 使用约定式提交格式
- 格式: [类型]:[描述] (如 feat: 添加用户认证功能)
- 类型包括: feat(新功能), fix(修复), docs(文档), style(格式), refactor(重构), test(测试), chore(维护)
- 提交信息使用中文，简洁明了

### 自动变更记录与提交
- 每完成一次大改动或功能后自动创建Git提交
- 每次提交前在项目根目录自动生成变更记录文档
- 变更记录存放在`changelog/`目录下，按日期和功能命名
- 变更记录必须包含：修改内容、影响范围、责任人和日期
- 采用Markdown格式记录详细变更说明
- 文档生成必须在Git提交之前完成

### 变更记录文档规范
- 文件命名格式：`YYYY-MM-DD-简短描述.md`
- 文档内容包括：标题、修改摘要、详细变更、测试情况、相关人员
- 重要变更需要添加变更原因和设计决策
- 所有API变更必须详细记录接口变化
- 自动更新根目录的CHANGELOG.md汇总文件

### 代码审查流程
- 所有合并到主分支的代码必须经过审查
- 代码审查注重逻辑正确性、性能影响和安全性
- 每个PR应当关联相应的任务或问题
- 避免过大的PR，保持变更范围可控

## 环境与配置管理

### 环境分离
- 区分开发环境、测试环境和生产环境
- 使用环境变量管理不同环境的配置
- 敏感信息不应硬编码在源代码中
- 为每个环境准备独立的配置文件

### 配置文件组织
- 前端使用.env文件管理环境变量
- 后端使用统一的配置包加载配置
- 配置变更应通过CI/CD流程管理
- 记录配置变更的历史和原因

## 部署与持续集成

### 构建流程
- 前端构建使用标准的npm脚本
- 后端构建生成单一可执行文件
- 构建过程应完全自动化
- 构建产物应有版本标识

### 容器化规范
- 提供Dockerfile实现容器化部署
- 遵循最小权限原则配置容器
- 使用多阶段构建减小镜像体积
- 生产环境容器不应包含开发依赖

### CI/CD流程
- 提交代码后自动触发CI流程
- CI包括代码静态分析、单元测试和构建
- 测试通过后自动部署到测试环境
- 生产环境部署需手动批准

## 测试策略

### 测试类型
- 前端: 单元测试、组件测试和E2E测试
- 后端: 单元测试、集成测试和API测试
- 关键功能需有自动化测试覆盖
- 新功能必须包含相应的测试

### 测试组织
- 测试文件与源代码文件放在同一目录
- 前端测试使用Jest和React Testing Library
- 后端测试使用Go标准测试框架
- 集成测试和E2E测试放在独立目录

## 开发工具使用

- 优先使用MCP工具进行文件操作
- 所有文件路径使用绝对路径
- 使用适当的版本控制策略
- 使用统一的代码编辑器配置(如.editorconfig)
- 使用代码格式化和lint工具确保代码风格一致
- 前端使用ESLint和Prettier
- 后端使用golangci-lint





