---
description: 
globs: 
alwaysApply: true
---
# 后端开发规则

## Go代码规范

- 遵循Go语言官方规范和最佳实践
- 使用适当的错误处理，避免panic
- 函数应该短小精悍，单一职责
- 严格控制代码复杂度，避免嵌套过深
- 参考后端入口文件：[main.go](mdc:backend/cmd/server/main.go)

### 代码风格与格式
- 使用gofmt工具格式化所有Go代码
- 遵循官方Go代码风格指南
- 变量命名使用驼峰命名法，缩写词保持一致大小写
- 包名应简短且具有描述性，避免下划线
- 导出的标识符必须有文档注释
- 文件长度尽量保持在500行以内

### 错误处理最佳实践
- 使用自定义错误类型增强错误上下文
- 错误应该只处理一次（记录或返回）
- 函数开头进行参数验证，提前返回错误
- 避免裸返回，显式命名并返回err变量
- 使用defer处理资源释放，确保函数退出时执行清理

### 并发编程指南
- 谨慎使用goroutine，确保其生命周期可控
- 使用context管理goroutine生命周期和超时
- 优先使用channel进行goroutine间通信
- 使用sync.WaitGroup等待goroutine完成
- 数据竞争问题使用mutex或atomic包解决

## API设计规范

- 采用RESTful API设计原则
- 使用标准HTTP状态码表示操作结果
- API版本控制通过URL路径（/api/v1/）实现
- 响应格式统一，包含状态码、消息和数据
- 确保API文档与实际实现保持同步

### 请求与响应规范
- GET请求用于获取资源，不应有副作用
- POST请求用于创建资源或执行操作
- PUT请求用于全量更新，PATCH用于部分更新
- DELETE请求用于删除资源
- 响应体使用统一JSON格式：`{"code": 200, "message": "成功", "data": {...}}`

### API安全措施
- 所有API端点必须有适当的认证和授权
- 使用JWT实现无状态认证
- 实施请求频率限制防止滥用
- 添加CSRF保护机制
- 敏感数据传输使用HTTPS

## 模型与数据库

- 数据模型定义应清晰明确
- 使用合适的数据库事务
- 优化SQL查询性能
- 参考用户模型：[user.go](mdc:backend/internal/model/sqlite/user.go)

### 数据库设计原则
- 表名使用小写字母和下划线分隔
- 字段名使用小写字母和下划线分隔
- 主键使用"id"命名，并使用自增整数或UUID
- 包含创建和更新时间戳
- 使用外键维护数据完整性
- 合理设置索引提高查询性能

### 事务管理
- 涉及多个写操作时必须使用事务
- 事务应该尽可能短，避免长时间持有锁
- 使用正确的隔离级别
- 实现事务重试机制处理竞争条件
- 遵循ACID原则确保数据一致性

### 查询优化
- 编写高效SQL，避免全表扫描
- 适当使用JOIN而非多次查询
- 限制查询结果数量和分页
- 监控慢查询并优化
- 缓存频繁访问的数据

## 安全性措施

- 所有用户输入必须验证和净化
- 密码必须哈希存储，推荐使用bcrypt
- 实施基于角色的访问控制(RBAC)
- 防止SQL注入攻击
- 记录安全相关日志

### 密码安全
- 密码存储使用bcrypt或argon2算法
- 密码强度要求：最小长度8，包含大小写字母和数字
- 密码重置使用时效性令牌和安全链接
- 多次登录失败实施账户锁定机制
- 定期要求更新密码

## 性能优化

- 使用连接池管理数据库连接
- 根据需要实现缓存机制
- 处理大量数据时使用分批处理
- 定期进行性能分析和优化
- 监控并调整内存使用和GC影响

### 并发与扩展性
- 设计水平扩展的服务架构
- 使用合适的goroutine池管理并发
- 非阻塞IO操作处理网络请求
- 合理分配计算资源
- 考虑微服务架构进行功能拆分

## 日志与监控

- 实现结构化日志记录
- 设置适当的日志级别（DEBUG、INFO、ERROR等）
- 包含足够上下文信息便于排查问题
- 避免记录敏感信息（密码、令牌等）
- 实现健康检查端点监控服务状态

## 文件操作规范

- 优先使用MCP工具进行文件操作和修改
- 文件路径应使用绝对路径
- 保持模块结构清晰
- 遵循Go模块化设计规范

### 代码组织
- 按功能组织代码到相应包中
- 相关功能应在同一包内
- 避免循环依赖
- 测试文件与源代码文件放在同一目录
- 遵循依赖注入原则降低耦合



