---
description: 
globs: 
alwaysApply: true
---
# 前端开发规则

## React 19 新特性使用指南

- 优先使用React 19的新特性，如Actions、Hooks 2.0等
- 使用新的服务器组件和客户端组件架构
- 使用React 19的资源加载和懒加载能力
- 保持代码简洁，充分利用React 19的性能优化
- 参考前端入口文件：[App.tsx](mdc:frontend/src/App.tsx)和[routes.tsx](mdc:frontend/src/routes.tsx)

### Actions 最佳实践
- 在表单提交等场景优先使用Actions替代事件处理器
- 使用useActionState获取Action执行状态
- 尽量在服务器组件中定义Actions
- 仅在需要即时反馈时才在客户端定义Actions

### Hooks 2.0 实践
- 使用新的useFormStatus和useOptimistic实现最佳用户体验
- 使用useNavigate、useHydration等新钩子管理路由和渲染
- 使用useDeferredValue优化输入性能
- 尽量减少useEffect的使用，优先考虑新的替代方案

### 服务器与客户端组件分离
- 严格遵循"use client"和"use server"指令
- 服务器组件负责数据获取和复杂计算
- 客户端组件负责状态管理和用户交互
- 避免不必要的组件渲染转换

## 组件结构优化

- 单文件代码行数不应超过1000行
- 超过1000行的组件应拆分为多个子组件
- 组件拆分应遵循单一职责原则
- 提取的组件应放在同一目录下或components目录
- 参考现有组件：[Login/index.tsx](mdc:frontend/src/pages/Login/index.tsx)

### 文件及目录命名
- 组件文件使用PascalCase命名（如ButtonGroup.tsx）
- 工具函数使用camelCase命名（如formatDate.ts）
- 组件目录使用与组件名称一致的PascalCase
- 自定义钩子以"use"开头（如useWindowSize.ts）
- 类型定义文件使用.types.ts后缀

### 状态管理原则
- 尽量使用React Context API管理全局状态
- 局部状态使用useState和useReducer
- 使用不可变数据模式更新状态
- 避免状态提升过高导致不必要的重渲染
- 考虑使用状态机管理复杂组件状态

### 组件组织方式
- 按功能组织相关组件到单一目录
- 共享组件放在src/components目录
- 页面级组件放在src/pages目录
- 模块化布局组件放在src/layouts目录
- 上下文提供者放在src/contexts目录

## Ant Design 5 使用规范

- 所有UI组件优先使用Ant Design 5组件库
- 保持Ant Design版本一致，避免混用不同版本
- 使用按需导入减小打包体积
- 遵循Ant Design官方示例和最佳实践
- 参考现有组件实现：[Login/index.tsx](mdc:frontend/src/pages/Login/index.tsx)

### 组件使用原则
- 使用Ant Design组件的语义化版本（例如使用`<Typography.Title>`而非`<h1>`）
- 避免过度定制修改组件默认行为
- 通过组合而非继承扩展组件功能
- 优先使用官方提供的属性配置，避免直接修改DOM
- 遵循最小集成原则，仅引入需要的组件

### 布局与栅格系统
- 使用Ant Design的Layout组件构建页面骨架
- 使用Grid系统（Row和Col）实现响应式布局
- 使用Space组件管理元素间距
- 使用Flex组件解决复杂布局问题
- 为各种屏幕尺寸设置适当的响应式断点

### 表单设计与验证
- 使用Form组件统一管理表单状态
- 实现表单字段的实时验证与提交验证
- 使用FormItem的依赖关联处理字段间逻辑
- 合理分组表单字段，提高填写效率
- 提供清晰的错误提示和表单帮助信息

### 主题与样式定制
- 使用ConfigProvider定制全局主题配置
- 通过less变量定制设计系统
- 使用主题切换支持亮色和暗色模式
- 遵循项目调色板保持视觉一致性
- CSS-in-JS样式采用就近原则，放在组件同级目录

### 数据展示组件
- 优先使用Table组件展示结构化数据
- 使用List组件展示同类数据集合
- 使用Card组件组织内容和操作
- 使用空状态组件（Empty）提供友好提示
- 数据加载期间提供骨架屏（Skeleton）减少视觉跳动

### 导航与交互
- 使用Menu和Breadcrumb构建导航系统
- 使用Modal和Drawer实现重要交互和表单
- 使用Tabs组织内容分类
- 使用消息反馈组件（message、notification）提供操作结果
- 使用气泡确认（Popconfirm）简化危险操作确认

## UI/UX设计规范

- 遵循Ant Design设计系统
- 保持视觉风格统一一致
- 使用响应式设计适配多种屏幕尺寸
- 支持暗色模式和主题切换
- 提供适当的加载状态和错误处理反馈

### 可访问性要求
- 符合WCAG 2.1 AA级标准
- 使用语义化HTML元素
- 提供键盘导航支持
- 确保足够的颜色对比度
- 为图像提供alt文本

## 性能优化指南

- 实现组件懒加载和代码分割
- 使用React.memo防止不必要的重渲染
- 优化长列表渲染（虚拟滚动）
- 使用Web Workers处理复杂计算
- 采用图像优化和资源预加载

### 性能指标目标
- 首次内容绘制(FCP) < 1.8s
- 最大内容绘制(LCP) < 2.5s
- 首次输入延迟(FID) < 100ms
- 累积布局偏移(CLS) < 0.1

## 文件操作规范

- 优先使用MCP工具进行文件操作和修改
- 文件路径应使用绝对路径
- 使用TypeScript类型系统确保类型安全
- 遵循现有项目的TypeScript配置

### TypeScript最佳实践
- 使用严格模式(strict: true)
- 明确定义所有类型，减少any的使用
- 利用泛型增强代码重用性
- 使用类型守卫处理联合类型
- 为API响应创建接口定义






