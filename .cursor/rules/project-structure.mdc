---
description: 项目结构规范
globs: 
alwaysApply: true
---

# 项目结构规范

## 项目概述
Mini Web 是一个使用现代前端技术栈React 19 + Vite + TypeScript构建的前端项目，配合Go语言后端提供完整的Web应用解决方案。

## 目录结构
```
mini-web/
├── .cursor/           # Cursor IDE相关配置
├── .git/              # Git版本控制
├── frontend/          # 前端代码
│   ├── public/        # 静态资源
│   ├── src/           # 源代码
│   │   ├── assets/    # 静态资源
│   │   ├── components/# 组件
│   │   ├── hooks/     # 自定义Hooks
│   │   ├── layouts/   # 布局组件
│   │   ├── pages/     # 页面组件
│   │   ├── services/  # API服务
│   │   ├── stores/    # 状态管理
│   │   ├── types/     # TypeScript类型定义
│   │   ├── utils/     # 工具函数
│   │   ├── App.tsx    # 应用入口组件
│   │   ├── main.tsx   # 主入口文件
│   │   └── vite-env.d.ts # Vite类型声明
│   ├── index.html     # HTML模板
│   ├── package.json   # 依赖管理
│   ├── tsconfig.json  # TypeScript配置
│   └── vite.config.ts # Vite配置
└── backend/           # 后端代码
    ├── cmd/           # 入口命令
    ├── internal/      # 内部包
    │   ├── api/       # API处理
    │   ├── config/    # 配置
    │   ├── middleware/# 中间件
    │   ├── model/     # 数据模型
    │   ├── repository/# 数据库操作
    │   └── service/   # 业务逻辑
    ├── pkg/           # 可导出的包
    ├── go.mod         # Go模块定义
    └── go.sum         # Go依赖校验
```

## 命名规范
- 文件名：使用kebab-case命名法（如：user-profile.tsx）
- 组件名：使用PascalCase命名法（如：UserProfile）
- 函数名：使用camelCase命名法（如：getUserData）
- 常量：使用SNAKE_CASE命名法（如：MAX_RETRY_COUNT）
- CSS类名：使用kebab-case命名法（如：user-avatar）

## 文件组织
- 每个组件应有自己的目录，包含组件文件、样式文件和测试文件
- 复杂组件可使用index.ts作为导出入口
- 相关功能应放在同一目录下
- 公共工具和常量应放在utils目录下

## 文件限制
- 单个文件不应超过1000行
- 当文件接近1000行时，考虑以下拆分策略：
  1. 提取可复用的组件
  2. 分离业务逻辑和UI逻辑
  3. 使用自定义Hook封装复杂的状态逻辑
  4. 根据功能模块拆分文件